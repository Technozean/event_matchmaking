# Generated by Django 5.2.5 on 2025-08-10 07:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('qr_code', models.ImageField(blank=True, upload_to='qr_codes/')),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('allow_waitlist', models.BooleanField(default=True)),
                ('enable_qa', models.BooleanField(default=True)),
                ('enable_matchmaking', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('template_type', models.CharField(choices=[('tech_meetup', 'Tech Meetup'), ('startup_networking', 'Startup Networking'), ('hr_talent', 'HR & Talent'), ('education', 'Education'), ('custom', 'Custom')], max_length=50)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChatQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('response', models.TextField()),
                ('query_type', models.CharField(default='general', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_queries', to='events.event')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('skill_distribution', 'Skill Distribution'), ('industry_spread', 'Industry Spread'), ('experience_levels', 'Experience Levels'), ('interests_analysis', 'Interests Analysis'), ('networking_potential', 'Networking Potential')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insights', to='events.event')),
            ],
            options={
                'ordering': ['-generated_at'],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventtemplate'),
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('organization', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='host_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='events.host'),
        ),
        migrations.CreateModel(
            name='OnboardingQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=500)),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('short_text', 'Short Text'), ('long_text', 'Long Text'), ('rating_scale', 'Rating Scale'), ('checkboxes', 'Checkboxes'), ('email', 'Email'), ('number', 'Number')], max_length=50)),
                ('is_mandatory', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('choices', models.TextField(blank=True, help_text='Comma-separated choices for MCQ/Checkboxes')),
                ('maps_to_field', models.CharField(blank=True, help_text='Field name for denormalization', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_questions', to='events.event')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='template_questions', to='events.eventtemplate')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=128)),
                ('last_name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('waitlisted', 'Waitlisted'), ('cancelled', 'Cancelled'), ('attended', 'Attended')], default='registered', max_length=20)),
                ('skills', models.CharField(blank=True, max_length=500)),
                ('role', models.CharField(blank=True, max_length=128)),
                ('industry', models.CharField(blank=True, max_length=128)),
                ('experience_years', models.IntegerField(blank=True, null=True)),
                ('interests', models.CharField(blank=True, max_length=500)),
                ('company', models.CharField(blank=True, max_length=255)),
                ('bio', models.TextField(blank=True)),
                ('priority_score', models.FloatField(default=0.0)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='events.event')),
            ],
            options={
                'ordering': ['-registered_at'],
                'unique_together': {('event', 'email')},
            },
        ),
        migrations.CreateModel(
            name='PublicQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('votes', models.IntegerField(default=0)),
                ('is_answered', models.BooleanField(default=False)),
                ('answer', models.TextField(blank=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.host')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_questions', to='events.event')),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='events.participant')),
            ],
            options={
                'ordering': ['-votes', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ParticipantMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_score', models.FloatField()),
                ('match_reasons', models.TextField()),
                ('is_mutual', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='events.event')),
                ('participant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_p1', to='events.participant')),
                ('participant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_p2', to='events.participant')),
            ],
            options={
                'ordering': ['-match_score'],
                'unique_together': {('participant1', 'participant2')},
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='events.participant')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.onboardingquestion')),
            ],
            options={
                'unique_together': {('participant', 'question')},
            },
        ),
        migrations.CreateModel(
            name='QuestionVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.participant')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_votes', to='events.publicquestion')),
            ],
            options={
                'unique_together': {('question', 'participant')},
            },
        ),
    ]
